@page "/iconlist/{Tab}"
@using System.Globalization;
@using System.Text.RegularExpressions;

<input @bind="searchTerm" @onkeydown="@(e => HandleKeyDown(e))" placeholder="Search..." />
<button @onclick="Search">Search</button>

<div class="svg-grid">
    @if (filteredSvgs.Count > 0)
    {
        @foreach (var svg in filteredSvgs)
        {
            <div class="svg-item-wrapper">
                <a href="@svg.Path" download="@svg.Name">
                    <div class="svg-item">
                        <img src="@svg.Path" alt="@svg.Name" style="min-width:180px;" />
                    </div>
                </a>
                <p>@(svg.Name.Length > 32 ? svg.Name.Substring(0, 32) + "..." : svg.Name)</p>
            </div>
        }
    }
    else
    {
    <p>No results found</p>
    }
</div>

<button @onclick="LoadMore" style="display: @(hasMoreToLoad ? "block" : "none")">Load More</button>

@code {
    [Parameter] public string Tab { get; set; } = string.Empty;

    private string searchTerm = string.Empty;
    private List<SvgFile> svgs = new List<SvgFile>();
    private List<SvgFile> filteredSvgs = new List<SvgFile>();
    private int loadCount = 20;
    private bool hasMoreToLoad = true;

    protected override async Task OnParametersSetAsync()
    {
        svgs.Clear();
        await LoadSvgs();
    }

    private async Task LoadSvgs(string searchTerm = null)
    {
        var svgFiles = Directory.EnumerateFiles($"wwwroot/icons/{Tab}", "*.svg", SearchOption.AllDirectories);

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            svgFiles = svgFiles.Where(file => file.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        svgFiles = svgFiles.Skip(svgs.Count).Take(loadCount);

        var loadTasks = svgFiles.Select(async svgFile =>
         {
             var fileName = Path.GetFileNameWithoutExtension(svgFile);

             var match = Regex.Match(fileName, @"^\d{5}-icon-service-(.+)$");
             var humanReadableName = match.Success ? match.Groups[1].Value.Replace("-", " ") : fileName.Replace("-", " ");

             // Modify this line to remove the trailing "_48_Regular" or "_48_Color"
             humanReadableName = Regex.Replace(humanReadableName, "_48_(Regular|Color)$", string.Empty, RegexOptions.IgnoreCase);

               humanReadableName = humanReadableName.Replace("_", " "); 

             humanReadableName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(humanReadableName);

             return new SvgFile { Path = svgFile.Replace("wwwroot", ""), Name = humanReadableName };
         });

        var newSvgs = await Task.WhenAll(loadTasks);

        hasMoreToLoad = newSvgs.Length == loadCount;

        svgs.AddRange(newSvgs);
        filteredSvgs = svgs;
    }

    async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

    private async Task Search()
    {
        svgs.Clear();
        await LoadSvgs(searchTerm);
        StateHasChanged();
    }

    private async Task LoadMore()
    {
        await LoadSvgs(searchTerm);
    }

    private class SvgFile
    {
        public string Path { get; set; }
        public string Name { get; set; }
    }
}
